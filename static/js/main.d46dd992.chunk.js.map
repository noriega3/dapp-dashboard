{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App_vaultBalance","CONTRACT_ADDR","ethAPI","etherscan_api_default","a","init","web3Api","web3_src_default","givenProvider","getAccountAddr","regenerator_default","_callee","accounts","wrap","_context","prev","next","eth","getAccounts","sent","abrupt","stop","this","_ref","apply","arguments","getData","_callee2","accountId","balance","walletBalance","abiArr","MyContract","_context2","account","result","contract","getabi","JSON","parse","Contract","methods","balanceOf","call","from","vaultBalance","_ref2","src_App_0","App","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","state","walletAddr","vaultAddr","setState","react_default","createElement","className","appbar_default","container_default","row_default","col_default","md","App_WithdrawalForm","App_DepositForm","tabs_default","onChange","defaultSelectedIndex","tab_default","value","label","onActive","form_default","inline","input_default","button_default","color","App_TransactionsList","address","react","panel_default","type","TransactionsList","_this2","messages","getPastLogs","fromBlock","topics","logs","console","log","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","react_dom_default","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d46dd992.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Appbar from 'muicss/lib/react/appbar'\nimport Container from 'muicss/lib/react/container'\nimport Col from 'muicss/lib/react/col'\nimport Row from 'muicss/lib/react/row'\nimport Tabs from 'muicss/lib/react/tabs'\nimport Tab from 'muicss/lib/react/tab'\nimport Form from 'muicss/lib/react/form'\nimport Input from 'muicss/lib/react/input'\nimport Button from 'muicss/lib/react/button'\nimport Panel from 'muicss/lib/react/panel'\nimport './App.css';\nimport Web3 from 'web3'\nimport Etherscan from 'etherscan-api'\nimport _ from 'lodash'\n\nconst TOKEN_API = '97JCGNIUANRCGTMSG3JZMHH2E8FI4FRYM1'\nconst CONTRACT_ADDR = '0x3430d3fc79e35f33bb69c4a0b4b89bc9ee107897'\nconst ethAPI = new Etherscan.init(TOKEN_API, 'kovan', 3000)\nconst web3Api = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nlet globalBalance, vaultBalance\n\n/*\n () Allow the user to deposit.\n () Allow the user to withdraw.\n (X) Show the user’s current Ether balance in his wallet.\n (X) Show the user’s current Ether balance in the Vault.\n () Show recent deposit and withdraw events from all users.\n */\n\nexport const getAccountAddr = async () => {\n    let accounts = await web3Api.eth.getAccounts()\n    return accounts[0]\n}\n\nexport const getData = async () => {\n    let accountId = await getAccountAddr()\n    let balance = await ethAPI.account.balance(accountId);\n    let walletBalance = balance.result\n    let abiArr = await ethAPI.contract.getabi(CONTRACT_ADDR);\n    let MyContract\n\n    abiArr = await JSON.parse(abiArr.result)\n    MyContract = new web3Api.eth.Contract(abiArr, CONTRACT_ADDR);\n    vaultBalance = await MyContract.methods.balanceOf(accountId).call({from: accountId})\n\n    return { accountId, walletBalance, vaultBalance}\n}\n\n\nclass App extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            walletAddr: -1,\n            walletBalance: 0,\n            vaultAddr: CONTRACT_ADDR,\n            vaultBalance: 0,\n        }\n    }\n\n    async componentDidMount(){\n\n        const {accountId, walletBalance, vaultBalance} = await getData()\n\n        this.setState({\n            walletAddr: accountId,\n            walletBalance: walletBalance,\n            vaultBalance: vaultBalance\n        })\n\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <Appbar />\n          <Container>\n              <Row>\n                  <Col md=\"6\">\n                      <WithdrawalForm />\n                      <DepositForm />\n                  </Col>\n                  <Col md=\"6\">\n                      <Tabs onChange={this.onChange} defaultSelectedIndex={0}>\n                          <Tab value=\"pane-1\" label=\"Vault\" onActive={this.onActive}>\n                              <div>Address: {this.state.vaultAddr}</div>\n                              <div>Balance: {this.state.vaultBalance}</div>\n                          </Tab>\n                          <Tab value=\"pane-2\" label=\"Wallet\">\n                              <div>Address: {this.state.walletAddr}</div>\n                              <div>Balance: {this.state.walletBalance}</div>\n                          </Tab>\n                      </Tabs>\n                  </Col>\n              </Row>\n              <Row>\n                  <Col md=\"12\">\n                      <div className=\"mui--text-subhead\">Get Balance</div>\n\n                      <Form inline={true}>\n                          <Input label={\"Get Balance For User\"} />\n                          <Button color={\"primary\"}>Get Balance</Button>\n                      </Form>\n\n                  </Col>\n              </Row>\n              <Row>\n                  <Col md=\"12\">\n                      <div className=\"mui--text-subhead\">Recent Transactions</div>\n                      <TransactionsList address={this.state.vaultAddr}/>\n                  </Col>\n              </Row>\n          </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\nclass WithdrawalForm extends Component {\n\n    render() {\n        return (\n            <Panel>\n                <Form inline={true}>\n                    <Input label={\"Withdrawal Amount\"} type={\"number\"} />\n                    <Button color={\"primary\"}>Withdraw</Button>\n                </Form>\n            </Panel>\n        );\n    }\n}\n\nclass DepositForm extends Component {\n\n    render() {\n        return (\n            <Panel>\n                <Form inline={true}>\n                    <Input label={\"Deposit Amount\"} type={\"number\"} />\n                    <Button color={\"accent\"}>Deposit</Button>\n                </Form>\n            </Panel>\n        );\n    }\n}\n\nclass TransactionsList extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            messages : []\n        }\n    }\n    async componentDidMount(){\n\n        let logs = await web3Api.eth.getPastLogs({\n            address: this.props.address,\n            fromBlock: 'earliest',\n            topics: [['0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364', '0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c']]\n        })\n        console.log('logs returned', logs)\n\n        this.setState({messages: logs})\n\n\n        //Subscriptions do not currently work with metamask\n/*        this.subDeposit = web3Api.eth.subscribe('logs', {\n            address: this.props.vaultAddr,\n            topics: [\n                '0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c',\n            ],\n        }, this.onDeposit)\n\n        this.subWithdraw = web3Api.eth.subscribe('logs', {\n            address: this.props.vaultAddr,\n            topics: [\n                '0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364',\n            ],\n        }, this.onWithdrawl)*/\n    }\n    render() {\n        return (\n            <Panel>\n                {this.state.logs}\n            </Panel>\n        );\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}